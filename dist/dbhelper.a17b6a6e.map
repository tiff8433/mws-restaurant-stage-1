{"version":3,"sources":["js/dbhelper.js"],"names":["DBHelper","callback","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","restaurants","JSON","parse","responseText","forEach","r","idbHelper","set","id","error","send","fetchRestaurants","restaurant","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","port"],"mappings":"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","file":"dbhelper.a17b6a6e.map","sourceRoot":"..","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        restaurants.forEach(r => idbHelper.set('restaurant', r.id, r));\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/images/${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n"]}
{"version":3,"sources":["js/dbhelper.js"],"names":["DBHelper","callback","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","restaurants","JSON","parse","responseText","error","send","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","newMap","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","port"],"mappings":"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","file":"dbhelper.cff69f04.map","sourceRoot":"..","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/images/${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, newMap) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\nexport default DBHelper;"]}
{"version":3,"sources":["node_modules/idb/lib/idb.js","js/idb/index.js","js/dbhelper.js","js/main.js","js/restaurant_info.js","index.js"],"names":["dbPromise","idb","open","upgradeDb","oldVersion","restaurantStore","createObjectStore","createIndex","restaurantIdb","get","key","then","db","transaction","objectStore","set","val","tx","put","complete","delete","clear","keys","store","iterateKeyCursor","iterateCursor","call","cursor","push","continue","DBHelper","callback","xhr","XMLHttpRequest","DATABASE_URL","onload","status","restaurants","JSON","parse","responseText","error","send","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","size","newMap","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","port","markers","fetchNeighborhoods","console","log","self","fillNeighborhoodsHTML","select","document","getElementById","setAttribute","forEach","option","createElement","innerHTML","value","append","fetchCuisines","fillCuisinesHTML","initMap","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","remove","div","createRestaurantHTML","addMarkersToMap","divWrapper","classList","add","picture","image","className","src","imageUrlForRestaurant","appendChild","address","href","mapMarkerForRestaurant","on","onClick","window","location","options","main","initRestaurantMap","fetchRestaurantFromURL","fillBreadcrumb","getParameterByName","fetchRestaurantById","fillRestaurantHTML","pathPrefix","smSrc","media","srcset","lgSrc","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","illRestaurantHoursHTML","operatingHours","hours","row","day","time","reviews","container","noReviews","createReviewHTML","review","li","date","rating","comments","breadcrumb","replace","regex","RegExp","exec","decodeURIComponent","addEventListener","event"],"mappingscAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,UAACC,SAAD,EAAe;AAC/C,YAAOA,UAAUC,UAAjB;AACI,aAAK,CAAL;AACI,gBAAMC,kBAAkBF,UAAUG,iBAAV,CAA4B,YAA5B,CAAxB;AACAD,4BAAgBE,WAAhB,CAA4B,MAA5B,EAAoC,SAApC,EAA+C,cAA/C;;AAHR;AAMH,CAPiB,CAAlB;;AASA,IAAMC,gBAAgB;AAClBC,OADkB,eACdC,GADc,EACT;AACL,eAAOV,UAAUW,IAAV,CAAe,cAAM;AACxBC,eAAGC,WAAH,CAAe,YAAf,EACKC,WADL,CACiB,YADjB,EAC+BL,GAD/B,CACmCC,GADnC;AAEH,SAHM,CAAP;AAIH,KANiB;AAOlBK,OAPkB,eAOdL,GAPc,EAOTM,GAPS,EAOJ;AACV,eAAOhB,UAAUW,IAAV,CAAe,cAAM;AACxB,gBAAMM,KAAKL,GAAGC,WAAH,CAAe,YAAf,EAA6B,WAA7B,CAAX;AACAI,eAAGH,WAAH,CAAe,YAAf,EAA6BI,GAA7B,CAAiCF,GAAjC,EAAsCN,GAAtC;AACA,mBAAOO,GAAGE,QAAV;AACH,SAJM,CAAP;AAKH,KAbiB;AAclBC,UAdkB,mBAcXV,GAdW,EAcN;AACR,eAAOV,UAAUW,IAAV,CAAe,cAAM;AACxB,gBAAMM,KAAKL,GAAGC,WAAH,CAAe,YAAf,EAA6B,WAA7B,CAAX;AACAI,eAAGH,WAAH,CAAe,YAAf,EAA6BM,MAA7B,CAAoCV,GAApC;AACA,mBAAOO,GAAGE,QAAV;AACH,SAJM,CAAP;AAKH,KApBiB;AAqBlBE,SArBkB,mBAqBV;AACJ,eAAOrB,UAAUW,IAAV,CAAe,cAAM;AACxB,gBAAMM,KAAKL,GAAGC,WAAH,CAAe,YAAf,EAA6B,WAA7B,CAAX;AACAI,eAAGH,WAAH,CAAe,YAAf,EAA6BO,KAA7B;AACA,mBAAOJ,GAAGE,QAAV;AACH,SAJM,CAAP;AAKH,KA3BiB;AA4BlBG,QA5BkB,kBA4BX;AACH,eAAOtB,UAAUW,IAAV,CAAe,cAAM;AACxB,gBAAMM,KAAKL,GAAGC,WAAH,CAAe,YAAf,CAAX;AACA,gBAAMS,OAAO,EAAb;AACA,gBAAMC,QAAQN,GAAGH,WAAH,CAAe,YAAf,CAAd;;AAEA,aAACS,MAAMC,gBAAN,IAA0BD,MAAME,aAAjC,EAAgDC,IAAhD,CAAqDH,KAArD,EAA4D,kBAAU;AAClE,oBAAI,CAACI,MAAL,EAAa;AACbL,qBAAKM,IAAL,CAAUD,OAAOjB,GAAjB;AACAiB,uBAAOE,QAAP;AACH,aAJD;AAKA,mBAAOZ,GAAGE,QAAH,CAAYR,IAAZ,CAAiB;AAAA,uBAAMW,IAAN;AAAA,aAAjB,CAAP;AACH,SAXM,CAAP;AAYH;AAzCiB,CAAtB;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvGA;;;IAGMQ;;;;;;;;;AAWJ;;;qCAGwBC,UAAU;AAChC,UAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,UAAI9B,IAAJ,CAAS,KAAT,EAAgB4B,SAASI,YAAzB;AACAF,UAAIG,MAAJ,GAAa,YAAM;AACjB,YAAIH,IAAII,MAAJ,KAAe,GAAnB,EAAwB;AAAE;AACxB,cAAMC,cAAcC,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAApB;AACAT,mBAAS,IAAT,EAAeM,WAAf;AACD,SAHD,MAGO;AAAE;AACP,cAAMI,gDAA+CT,IAAII,MAAzD;AACAL,mBAASU,KAAT,EAAgB,IAAhB;AACD;AACF,OARD;AASAT,UAAIU,IAAJ;AACD;;AAED;;;;;;wCAG2BC,IAAIZ,UAAU;AACvC;AACAD,eAASc,gBAAT,CAA0B,UAACH,KAAD,EAAQJ,WAAR,EAAwB;AAChD,YAAII,KAAJ,EAAW;AACTV,mBAASU,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACL,cAAMI,aAAaR,YAAYS,IAAZ,CAAiB;AAAA,mBAAKC,EAAEJ,EAAF,IAAQA,EAAb;AAAA,WAAjB,CAAnB;AACA,cAAIE,UAAJ,EAAgB;AAAE;AAChBd,qBAAS,IAAT,EAAec,UAAf;AACD,WAFD,MAEO;AAAE;AACPd,qBAAS,2BAAT,EAAsC,IAAtC;AACD;AACF;AACF,OAXD;AAYD;;AAED;;;;;;6CAGgCiB,SAASjB,UAAU;AACjD;AACAD,eAASc,gBAAT,CAA0B,UAACH,KAAD,EAAQJ,WAAR,EAAwB;AAChD,YAAII,KAAJ,EAAW;AACTV,mBAASU,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACL;AACA,cAAMQ,UAAUZ,YAAYa,MAAZ,CAAmB;AAAA,mBAAKH,EAAEI,YAAF,IAAkBH,OAAvB;AAAA,WAAnB,CAAhB;AACAjB,mBAAS,IAAT,EAAekB,OAAf;AACD;AACF,OARD;AASD;;AAED;;;;;;kDAGqCG,cAAcrB,UAAU;AAC3D;AACAD,eAASc,gBAAT,CAA0B,UAACH,KAAD,EAAQJ,WAAR,EAAwB;AAChD,YAAII,KAAJ,EAAW;AACTV,mBAASU,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACL;AACA,cAAMQ,UAAUZ,YAAYa,MAAZ,CAAmB;AAAA,mBAAKH,EAAEK,YAAF,IAAkBA,YAAvB;AAAA,WAAnB,CAAhB;AACArB,mBAAS,IAAT,EAAekB,OAAf;AACD;AACF,OARD;AASD;;AAED;;;;;;4DAG+CD,SAASI,cAAcrB,UAAU;AAC9E;AACAD,eAASc,gBAAT,CAA0B,UAACH,KAAD,EAAQJ,WAAR,EAAwB;AAChD,YAAII,KAAJ,EAAW;AACTV,mBAASU,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACL,cAAIQ,UAAUZ,WAAd;AACA,cAAIW,WAAW,KAAf,EAAsB;AAAE;AACtBC,sBAAUA,QAAQC,MAAR,CAAe;AAAA,qBAAKH,EAAEI,YAAF,IAAkBH,OAAvB;AAAA,aAAf,CAAV;AACD;AACD,cAAII,gBAAgB,KAApB,EAA2B;AAAE;AAC3BH,sBAAUA,QAAQC,MAAR,CAAe;AAAA,qBAAKH,EAAEK,YAAF,IAAkBA,YAAvB;AAAA,aAAf,CAAV;AACD;AACDrB,mBAAS,IAAT,EAAekB,OAAf;AACD;AACF,OAbD;AAcD;;AAED;;;;;;uCAG0BlB,UAAU;AAClC;AACAD,eAASc,gBAAT,CAA0B,UAACH,KAAD,EAAQJ,WAAR,EAAwB;AAChD,YAAII,KAAJ,EAAW;AACTV,mBAASU,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACL;AACA,cAAMY,gBAAgBhB,YAAYiB,GAAZ,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUnB,YAAYmB,CAAZ,EAAeJ,YAAzB;AAAA,WAAhB,CAAtB;AACA;AACA,cAAMK,sBAAsBJ,cAAcH,MAAd,CAAqB,UAACK,CAAD,EAAIC,CAAJ;AAAA,mBAAUH,cAAcK,OAAd,CAAsBH,CAAtB,KAA4BC,CAAtC;AAAA,WAArB,CAA5B;AACAzB,mBAAS,IAAT,EAAe0B,mBAAf;AACD;AACF,OAVD;AAWD;;AAED;;;;;;kCAGqB1B,UAAU;AAC7B;AACAD,eAASc,gBAAT,CAA0B,UAACH,KAAD,EAAQJ,WAAR,EAAwB;AAChD,YAAII,KAAJ,EAAW;AACTV,mBAASU,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACL;AACA,cAAMkB,WAAWtB,YAAYiB,GAAZ,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUnB,YAAYmB,CAAZ,EAAeL,YAAzB;AAAA,WAAhB,CAAjB;AACA;AACA,cAAMS,iBAAiBD,SAAST,MAAT,CAAgB,UAACK,CAAD,EAAIC,CAAJ;AAAA,mBAAUG,SAASD,OAAT,CAAiBH,CAAjB,KAAuBC,CAAjC;AAAA,WAAhB,CAAvB;AACAzB,mBAAS,IAAT,EAAe6B,cAAf;AACD;AACF,OAVD;AAWD;;AAED;;;;;;qCAGwBf,YAAY;AAClC,uCAAgCA,WAAWF,EAA3C;AACD;;AAED;;;;;;0CAG6BE,YAAYgB,MAAM;AAC7C,kCAA0BhB,WAAWF,EAArC,SAA2CkB,IAA3C;AACD;;AAED;;;;;;2CAG+BhB,YAAYiB,QAAQ;AACjD;AACA,UAAMC,SAAS,IAAIC,EAAED,MAAN,CAAa,CAAClB,WAAWoB,MAAX,CAAkBC,GAAnB,EAAwBrB,WAAWoB,MAAX,CAAkBE,GAA1C,CAAb,EACb,EAACC,OAAOvB,WAAWwB,IAAnB;AACAC,aAAKzB,WAAWwB,IADhB;AAEAE,aAAKzC,SAAS0C,gBAAT,CAA0B3B,UAA1B;AAFL,OADa,CAAf;AAKEkB,aAAOU,KAAP,CAAaX,MAAb;AACF,aAAOC,MAAP;AACD;AACD;;;;;;;;;;;;;;;AAlKA;;;;wBAI0B;AACxB,UAAMW,OAAO,IAAb,CADwB,CACN;AAClB,mCAA2BA,IAA3B;AACD;;;;;;kBAwKY5C;;;;;;;;ACpLf;;;;AACA;;;;;;AAEA,IAAIO,oBAAJ;AAAA,IACEgB,sBADF;AAAA,IAEEM,iBAFF;AAGA,IAAIG,MAAJ;AACA,IAAIa,UAAU,EAAd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA,IAAMC,qBAAqB,SAArBA,kBAAqB,GAAM;AAC/BC,UAAQC,GAAR,CAAY,QAAZ,EAAsBhD,kBAAtB;AACAA,qBAAS8C,kBAAT,CAA4B,UAACnC,KAAD,EAAQY,aAAR,EAA0B;AACpD,QAAIZ,KAAJ,EAAW;AAAE;AACXoC,cAAQpC,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACLsC,WAAK1B,aAAL,GAAqBA,aAArB;AACA2B;AACD;AACF,GAPD;AAQD,CAVD;;AAYA;;;AAGA,IAAMA,wBAAwB,SAAxBA,qBAAwB,GAAwC;AAAA,MAAvC3B,aAAuC,uEAAvB0B,KAAK1B,aAAkB;;AACpE,MAAM4B,SAASC,SAASC,cAAT,CAAwB,sBAAxB,CAAf;AACAF,SAAOG,YAAP,CAAoB,YAApB,EAAkC,qBAAlC;AACA/B,gBAAcgC,OAAd,CAAsB,wBAAgB;AACpC,QAAMC,SAASJ,SAASK,aAAT,CAAuB,QAAvB,CAAf;AACAD,WAAOE,SAAP,GAAmBpC,YAAnB;AACAkC,WAAOG,KAAP,GAAerC,YAAf;AACA6B,WAAOS,MAAP,CAAcJ,MAAd;AACD,GALD;AAMD,CATD;;AAWA;;;AAGA,IAAMK,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1B7D,qBAAS6D,aAAT,CAAuB,UAAClD,KAAD,EAAQkB,QAAR,EAAqB;AAC1C,QAAIlB,KAAJ,EAAW;AAAE;AACXoC,cAAQpC,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACLsC,WAAKpB,QAAL,GAAgBA,QAAhB;AACAiC;AACD;AACF,GAPD;AAQD,CATD;;AAWA;;;AAGA,IAAMA,mBAAmB,SAAnBA,gBAAmB,GAA8B;AAAA,MAA7BjC,QAA6B,uEAAlBoB,KAAKpB,QAAa;;AACrD,MAAMsB,SAASC,SAASC,cAAT,CAAwB,iBAAxB,CAAf;AACAF,SAAOG,YAAP,CAAoB,YAApB,EAAkC,iBAAlC;;AAEAzB,WAAS0B,OAAT,CAAiB,mBAAW;AAC1B,QAAMC,SAASJ,SAASK,aAAT,CAAuB,QAAvB,CAAf;AACAD,WAAOE,SAAP,GAAmBxC,OAAnB;AACAsC,WAAOG,KAAP,GAAezC,OAAf;AACAiC,WAAOS,MAAP,CAAcJ,MAAd;AACD,GALD;AAMD,CAVD;;AAYA;;;AAGA,IAAMO,UAAU,SAAVA,OAAU,GAAM;AACpB/B,WAASE,EAAEV,GAAF,CAAM,KAAN,EAAa;AAChBwC,YAAQ,CAAC,SAAD,EAAY,CAAC,SAAb,CADQ;AAEhBC,UAAM,EAFU;AAGhBC,qBAAiB;AAHD,GAAb,CAAT;AAKAhC,IAAEiC,SAAF,CAAY,mFAAZ,EAAiG;AAC/FC,iBAAa,gGADkF;AAE/FC,aAAS,EAFsF;AAG/FC,iBAAa,8FACX,0EADW,GAEX,wDAL6F;AAM/FzD,QAAI;AAN2F,GAAjG,EAOG8B,KAPH,CAOSX,MAPT;;AASAuC;AACD,CAhBD;AAiBA;;;;;;;;;;;;;AAaA;;;AAGA,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAM;AAC9B,MAAMC,UAAUpB,SAASC,cAAT,CAAwB,iBAAxB,CAAhB;AACA,MAAMoB,UAAUrB,SAASC,cAAT,CAAwB,sBAAxB,CAAhB;;AAEA,MAAMqB,SAASF,QAAQG,aAAvB;AACA,MAAMC,SAASH,QAAQE,aAAvB;;AAEA,MAAMzD,UAAUsD,QAAQE,MAAR,EAAgBf,KAAhC;AACA,MAAMrC,eAAemD,QAAQG,MAAR,EAAgBjB,KAArC;;AAEA3D,qBAAS6E,uCAAT,CAAiD3D,OAAjD,EAA0DI,YAA1D,EAAwE,UAACX,KAAD,EAAQJ,WAAR,EAAwB;AAC9F,QAAII,KAAJ,EAAW;AAAE;AACXoC,cAAQpC,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACLmE,uBAAiBvE,WAAjB;AACAwE;AACD;AACF,GAPD;AAQD,CAlBD;;AAoBA;;;AAGA,IAAMD,mBAAmB,SAAnBA,gBAAmB,CAACvE,WAAD,EAAiB;AACxC;AACA0C,OAAK1C,WAAL,GAAmB,EAAnB;AACA,MAAMyE,KAAK5B,SAASC,cAAT,CAAwB,kBAAxB,CAAX;AACA2B,KAAGtB,SAAH,GAAe,EAAf;;AAEA;AACA,MAAIT,KAAKJ,OAAT,EAAkB;AAChBI,SAAKJ,OAAL,CAAaU,OAAb,CAAqB;AAAA,aAAUtB,OAAOgD,MAAP,EAAV;AAAA,KAArB;AACD;AACDhC,OAAKJ,OAAL,GAAe,EAAf;AACAI,OAAK1C,WAAL,GAAmBA,WAAnB;AACD,CAZD;;AAcA;;;AAGA,IAAMwE,sBAAsB,SAAtBA,mBAAsB,GAAoC;AAAA,MAAnCxE,WAAmC,uEAArB0C,KAAK1C,WAAgB;;AAC9D,MAAM2E,MAAM9B,SAASC,cAAT,CAAwB,kBAAxB,CAAZ;AACA9C,cAAYgD,OAAZ,CAAoB,sBAAc;AAChC2B,QAAItB,MAAJ,CAAWuB,qBAAqBpE,UAArB,CAAX;AACD,GAFD;AAGAqE;AACD,CAND;;AAQA;;;AAGA,IAAMD,uBAAuB,SAAvBA,oBAAuB,CAACpE,UAAD,EAAgB;AAC3C,MAAMsE,aAAajC,SAASK,aAAT,CAAuB,KAAvB,CAAnB;AACA4B,aAAWC,SAAX,CAAqBC,GAArB,CAAyB,oBAAzB;;AAEA,MAAML,MAAM9B,SAASK,aAAT,CAAuB,GAAvB,CAAZ;AACA4B,aAAWzB,MAAX,CAAkBsB,GAAlB;;AAEA,MAAMM,UAAUpC,SAASK,aAAT,CAAuB,SAAvB,CAAhB;;AAEA,MAAMgC,QAAQrC,SAASK,aAAT,CAAuB,KAAvB,CAAd;AACAgC,QAAMC,SAAN,GAAkB,gBAAlB;AACA;AACA;AACAD,QAAME,GAAN,GAAY3F,mBAAS4F,qBAAT,CAA+B7E,UAA/B,EAA2C,OAA3C,CAAZ;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA0E,QAAMjD,GAAN,GAAYzB,WAAWwB,IAAvB;AACA;AACA;AACAiD,UAAQK,WAAR,CAAoBJ,KAApB;AACAP,MAAItB,MAAJ,CAAW4B,OAAX;;AAGA,MAAMjD,OAAOa,SAASK,aAAT,CAAuB,IAAvB,CAAb;AACAlB,OAAKmB,SAAL,GAAiB3C,WAAWwB,IAA5B;AACA2C,MAAItB,MAAJ,CAAWrB,IAAX;;AAEA,MAAMjB,eAAe8B,SAASK,aAAT,CAAuB,GAAvB,CAArB;AACAnC,eAAaoC,SAAb,GAAyB3C,WAAWO,YAApC;AACA4D,MAAItB,MAAJ,CAAWtC,YAAX;;AAEA,MAAMwE,UAAU1C,SAASK,aAAT,CAAuB,GAAvB,CAAhB;AACAqC,UAAQpC,SAAR,GAAoB3C,WAAW+E,OAA/B;AACAZ,MAAItB,MAAJ,CAAWkC,OAAX;;AAEA;AACA;AACAZ,MAAIa,IAAJ,GAAW/F,mBAAS0C,gBAAT,CAA0B3B,UAA1B,CAAX;AACA;;AAEA,SAAOsE,UAAP;AACD,CApDD;;AAsDA;;;AAGA,IAAMD,kBAAkB,SAAlBA,eAAkB,GAAoC;AAAA,MAAnC7E,WAAmC,uEAArB0C,KAAK1C,WAAgB;;AAC1DA,cAAYgD,OAAZ,CAAoB,sBAAc;AAChC;AACA,QAAMtB,SAASjC,mBAASgG,sBAAT,CAAgCjF,UAAhC,EAA4CiB,MAA5C,CAAf;AACAC,WAAOgE,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACA,aAASA,OAAT,GAAmB;AACjBC,aAAOC,QAAP,CAAgBL,IAAhB,GAAuB9D,OAAOoE,OAAP,CAAe5D,GAAtC;AACD;AACDQ,SAAKJ,OAAL,CAAa/C,IAAb,CAAkBmC,MAAlB;AACD,GARD;AAUD,CAXD;AAYA;;;;;;;;;;;AAWA,IAAMqE,OAAO;AACXvC,kBADW;AAEXjB,wCAFW;AAGXe;AAHW,CAAb;;kBAMeyC;;;;;;;AC1Pf,IAAIvF,mBAAJ;AACA,IAAIiB,MAAJ;;AAEA;;;AAGA;AACA;AACA;;AAEA;;;AAGA,IAAMuE,oBAAoB,SAApBA,iBAAoB,GAAM;AAC9BC,yBAAuB,UAAC7F,KAAD,EAAQI,UAAR,EAAuB;AAC5C,QAAIJ,KAAJ,EAAW;AAAE;AACXoC,cAAQpC,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACLsC,WAAKjB,MAAL,GAAcE,EAAEV,GAAF,CAAM,KAAN,EAAa;AACzBwC,gBAAQ,CAACjD,WAAWoB,MAAX,CAAkBC,GAAnB,EAAwBrB,WAAWoB,MAAX,CAAkBE,GAA1C,CADiB;AAEzB4B,cAAM,EAFmB;AAGzBC,yBAAiB;AAHQ,OAAb,CAAd;AAKAhC,QAAEiC,SAAF,CAAY,mFAAZ,EAAiG;AAC/FC,qBAAa,gGADkF;AAE/FC,iBAAS,EAFsF;AAG/FC,qBAAa,8FACX,0EADW,GAEX,wDAL6F;AAM/FzD,YAAI;AAN2F,OAAjG,EAOG8B,KAPH,CAOSX,MAPT;AAQAyE;AACAzG,eAASgG,sBAAT,CAAgC/C,KAAKlC,UAArC,EAAiDkC,KAAKjB,MAAtD;AACD;AACF,GApBD;AAqBD,CAtBD;;AAwBA;;;;;;;;;;;;;;;;AAgBA;;;AAGA,IAAMwE,yBAAyB,SAAzBA,sBAAyB,CAACvG,QAAD,EAAc;AAC3C,MAAIgD,KAAKlC,UAAT,EAAqB;AAAE;AACrBd,aAAS,IAAT,EAAegD,KAAKlC,UAApB;AACA;AACD;AACD,MAAMF,KAAK6F,mBAAmB,IAAnB,CAAX;AACA,MAAI,CAAC7F,EAAL,EAAS;AAAE;AACTF,YAAQ,yBAAR;AACAV,aAASU,KAAT,EAAgB,IAAhB;AACD,GAHD,MAGO;AACLX,aAAS2G,mBAAT,CAA6B9F,EAA7B,EAAiC,UAACF,KAAD,EAAQI,UAAR,EAAuB;AACtDkC,WAAKlC,UAAL,GAAkBA,UAAlB;AACA,UAAI,CAACA,UAAL,EAAiB;AACfgC,gBAAQpC,KAAR,CAAcA,KAAd;AACA;AACD;AACDiG;AACA3G,eAAS,IAAT,EAAec,UAAf;AACD,KARD;AASD;AACF,CApBD;;AAsBA;;;AAGA,IAAM6F,qBAAqB,SAArBA,kBAAqB,GAAkC;AAAA,MAAjC7F,UAAiC,uEAApBkC,KAAKlC,UAAe;;AAC3D,MAAMwB,OAAOa,SAASC,cAAT,CAAwB,iBAAxB,CAAb;AACAd,OAAKmB,SAAL,GAAiB3C,WAAWwB,IAA5B;;AAEA,MAAMuD,UAAU1C,SAASC,cAAT,CAAwB,oBAAxB,CAAhB;AACAyC,UAAQpC,SAAR,GAAoB3C,WAAW+E,OAA/B;;AAEA,MAAMN,UAAUpC,SAASC,cAAT,CAAwB,gBAAxB,CAAhB;;AAEA,MAAMoC,QAAQrC,SAASK,aAAT,CAAuB,KAAvB,CAAd;AACAgC,QAAMC,SAAN,GAAkB,gBAAlB;AACAmB,eAAa7G,SAAS4F,qBAAT,CAA+B7E,UAA/B,CAAb;AACA0E,QAAME,GAAN,GAAekB,UAAf;;AAEA,MAAMC,QAAQ1D,SAASK,aAAT,CAAuB,QAAvB,CAAd;AACAqD,QAAMC,KAAN,GAAc,oBAAd;AACAD,QAAME,MAAN,GAAkBH,UAAlB;;AAGA,MAAMI,QAAQ7D,SAASK,aAAT,CAAuB,QAAvB,CAAd;AACAwD,QAAMF,KAAN,GAAc,oBAAd;AACAE,QAAMD,MAAN,GAAkBH,UAAlB,oBAA2CA,UAA3C;;AAEApB,QAAMjD,GAAN,GAAYsE,MAAMtE,GAAN,GAAYyE,MAAMzE,GAAN,GAAYzB,WAAWwB,IAA/C;AACAiD,UAAQK,WAAR,CAAoBiB,KAApB;AACAtB,UAAQK,WAAR,CAAoBoB,KAApB;AACAzB,UAAQK,WAAR,CAAoBJ,KAApB;AACA;;AAEA,MAAMvE,UAAUkC,SAASC,cAAT,CAAwB,oBAAxB,CAAhB;AACAnC,UAAQwC,SAAR,GAAoB3C,WAAWM,YAA/B;;AAEA;AACA,MAAIN,WAAWmG,eAAf,EAAgC;AAC9BC;AACD;AACD;AACAC;AACD,CAtCD;;AAwCA;;;AAGA,IAAMC,yBAAyB,SAAzBA,sBAAyB,GAAsD;AAAA,MAArDC,cAAqD,uEAApCrE,KAAKlC,UAAL,CAAgBmG,eAAoB;;AACnF,MAAMK,QAAQnE,SAASC,cAAT,CAAwB,kBAAxB,CAAd;AACA,OAAK,IAAIzE,GAAT,IAAgB0I,cAAhB,EAAgC;AAC9B,QAAME,MAAMpE,SAASK,aAAT,CAAuB,IAAvB,CAAZ;;AAEA,QAAMgE,MAAMrE,SAASK,aAAT,CAAuB,IAAvB,CAAZ;AACAgE,QAAI/D,SAAJ,GAAgB9E,GAAhB;AACA4I,QAAI3B,WAAJ,CAAgB4B,GAAhB;;AAEA,QAAMC,OAAOtE,SAASK,aAAT,CAAuB,IAAvB,CAAb;AACAiE,SAAKhE,SAAL,GAAiB4D,eAAe1I,GAAf,CAAjB;AACA4I,QAAI3B,WAAJ,CAAgB6B,IAAhB;;AAEAH,UAAM1B,WAAN,CAAkB2B,GAAlB;AACD;AACF,CAfD;;AAiBA;;;AAGA,IAAMJ,kBAAkB,SAAlBA,eAAkB,GAAuC;AAAA,MAAtCO,OAAsC,uEAA5B1E,KAAKlC,UAAL,CAAgB4G,OAAY;;AAC7D,MAAMC,YAAYxE,SAASC,cAAT,CAAwB,mBAAxB,CAAlB;AACA,MAAMf,QAAQc,SAASK,aAAT,CAAuB,IAAvB,CAAd;AACAnB,QAAMoB,SAAN,GAAkB,SAAlB;AACAkE,YAAU/B,WAAV,CAAsBvD,KAAtB;;AAEA,MAAI,CAACqF,OAAL,EAAc;AACZ,QAAME,YAAYzE,SAASK,aAAT,CAAuB,GAAvB,CAAlB;AACAoE,cAAUnE,SAAV,GAAsB,iBAAtB;AACAkE,cAAU/B,WAAV,CAAsBgC,SAAtB;AACA;AACD;AACD,MAAM7C,KAAK5B,SAASC,cAAT,CAAwB,cAAxB,CAAX;AACAsE,UAAQpE,OAAR,CAAgB,kBAAU;AACxByB,OAAGa,WAAH,CAAeiC,iBAAiBC,MAAjB,CAAf;AACD,GAFD;AAGAH,YAAU/B,WAAV,CAAsBb,EAAtB;AACD,CAjBD;;AAmBA;;;AAGA,IAAM8C,mBAAmB,SAAnBA,gBAAmB,CAACC,MAAD,EAAY;AACnC,MAAMC,KAAK5E,SAASK,aAAT,CAAuB,IAAvB,CAAX;AACA,MAAMlB,OAAOa,SAASK,aAAT,CAAuB,GAAvB,CAAb;AACAlB,OAAKmB,SAAL,GAAiBqE,OAAOxF,IAAxB;AACAyF,KAAGnC,WAAH,CAAetD,IAAf;;AAEA,MAAM0F,OAAO7E,SAASK,aAAT,CAAuB,GAAvB,CAAb;AACAwE,OAAKvE,SAAL,GAAiBqE,OAAOE,IAAxB;AACAD,KAAGnC,WAAH,CAAeoC,IAAf;;AAEA,MAAMC,SAAS9E,SAASK,aAAT,CAAuB,GAAvB,CAAf;AACAyE,SAAOxE,SAAP,gBAA8BqE,OAAOG,MAArC;AACAF,KAAGnC,WAAH,CAAeqC,MAAf;;AAEA,MAAMC,WAAW/E,SAASK,aAAT,CAAuB,GAAvB,CAAjB;AACA0E,WAASzE,SAAT,GAAqBqE,OAAOI,QAA5B;AACAH,KAAGnC,WAAH,CAAesC,QAAf;;AAEA,SAAOH,EAAP;AACD,CAnBD;;AAqBA;;;AAGA,IAAMvB,iBAAiB,SAAjBA,cAAiB,GAAgC;AAAA,MAA/B1F,UAA+B,uEAApBkC,KAAKlC,UAAe;;AACrD,MAAMqH,aAAahF,SAASC,cAAT,CAAwB,YAAxB,CAAnB;AACA,MAAM2E,KAAK5E,SAASK,aAAT,CAAuB,IAAvB,CAAX;AACAuE,KAAGtE,SAAH,GAAe3C,WAAWwB,IAA1B;AACA6F,aAAWvC,WAAX,CAAuBmC,EAAvB;AACD,CALD;;AAOA;;;AAGA,IAAMtB,qBAAqB,SAArBA,kBAAqB,CAACnE,IAAD,EAAOE,GAAP,EAAe;AACxC,MAAI,CAACA,GAAL,EACEA,MAAM0D,OAAOC,QAAP,CAAgBL,IAAtB;AACFxD,SAAOA,KAAK8F,OAAL,CAAa,SAAb,EAAwB,MAAxB,CAAP;AACA,MAAMC,QAAQ,IAAIC,MAAJ,UAAkBhG,IAAlB,uBAAd;AAAA,MACEpB,UAAUmH,MAAME,IAAN,CAAW/F,GAAX,CADZ;AAEA,MAAI,CAACtB,OAAL,EACE,OAAO,IAAP;AACF,MAAI,CAACA,QAAQ,CAAR,CAAL,EACE,OAAO,EAAP;AACF,SAAOsH,mBAAmBtH,QAAQ,CAAR,EAAWkH,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAnB,CAAP;AACD,CAXD;;kBAae;AACb9B;AADa;;;;ACrNf;;;;AACA;;;;AAEAnD,SAASsF,gBAAT,CAA0B,kBAA1B,EAA8C,UAACC,KAAD,EAAW;AACrDrC,mBAAKvC,OAAL,GADqD,CACrC;AAChBuC,mBAAKxD,kBAAL;AACAwD,mBAAKzC,aAAL;AACD,CAJH","file":"mws-restaurant-stage-1.8e64a6a9.map","sourceRoot":"..","sourcesContent":["'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\n\n// set up db store\nconst dbPromise = idb.open('db', 1, (upgradeDb) => {\n    switch(upgradeDb.oldVersion) {\n        case 1:\n            const restaurantStore = upgradeDb.createObjectStore('restaurant');\n            restaurantStore.createIndex('name', 'cuisine', 'neighborhood');\n\n    }\n});\n\nconst restaurantIdb = {\n    get(key) {\n        return dbPromise.then(db => {\n            db.transaction('restaurant')\n                .objectStore('restaurant').get(key)\n        });\n    },\n    set(key, val) {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant', 'readwrite');\n            tx.objectStore('restaurant').put(val, key);\n            return tx.complete;\n        });\n    },\n    delete(key) {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant', 'readwrite');\n            tx.objectStore('restaurant').delete(key);\n            return tx.complete;\n        });\n    },\n    clear() {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant', 'readwrite');\n            tx.objectStore('restaurant').clear();\n            return tx.complete;\n        });\n    },\n    keys() {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant');\n            const keys = [];\n            const store = tx.objectStore('restaurant');\n\n            (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n                if (!cursor) return;\n                keys.push(cursor.key);\n                cursor.continue();\n            });\n            return tx.complete.then(() => keys);\n        })\n    }\n};\n\n\n// get a value\n// dbPromise.then((db) => {\n//     const tx = db.transaction('restaurant');\n//     const restaurantStore = tx.objectStore('restaurant');\n//     return restaurantStore.get('rest');\n// }).then((val) => {\n//     console.log('The value of \"rest\" is\", val');\n// });\n\n// set a value\n// dbPromise.then((db) => {\n//     const tx = db.transaction('restaurant', 'readwrite');\n//     const restaurantStore = tx.objectStore('restaurant');\n//     restaurantStore.put('restaurant_id', 'restaurant_obj');\n//     return tx.complete;\n// }).then((val) => {\n//     console.log('Added restaurant_obj to restaurant_id');\n// });\n\n// return all\n// dbPromise.then((db) => {\n//     const tx = db.transaaction('restaurant');\n//     const restStore = tx.objectStore('restaurant');\n//     const neighborhoodIdx = restStore.index('neighborhood');\n//     return neighborhoodIdx.getAll();\n// }).then((restaurants) => {\n//     console.log('indexed by neighborhood', restaurants);\n// });\n\n\n// // iterate through list\n// dbPromise.then((db) => {\n//     const tx = db.transaaction('restaurant');\n//     const restStore = tx.objectStore('restaurant');\n//     const neighborhoodIdx = restStore.index('neighborhood');\n//     return neighborhoodIdx.openCursor();\n// }).then(function logRestaurant(cursor) {\n//     if (!cursor) return;\n//     console.log('cursored at:', cursor.value.name);\n\n//     // update: cursor.update\n//     // delete: cursor.delete\n//     // skip: cursor.advance(numtoAdvance)\n//     return cursor.continue().then(logRestaurant);\n// }).then(() => {\n//     console.log('done cursoring');\n// });\n\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, size) {\r\n    return `./static/images/${restaurant.id}-${size}.jpg`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, newMap) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\nexport default DBHelper;","import dbPromise from './idb';\r\nimport DBHelper from './dbhelper.js';\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar newMap\r\nvar markers = []\r\n\r\n// /**\r\n//  * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n//  */\r\n// document.addEventListener('DOMContentLoaded', (event) => {\r\n//   initMap(); // added \r\n//   fetchNeighborhoods();\r\n//   fetchCuisines();\r\n// });\r\n\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  console.log('DBHELP', DBHelper);\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  select.setAttribute('aria-label', \"neighborhood select\");\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n  select.setAttribute('aria-label', \"cuisines select\");\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoidGlmZmFueWgxMDEiLCJhIjoiY2ppcTltYWdjMDB4dTNsbzF2MTBrd3U5NyJ9.p99H31XzJEgUSu1jJYRZDg',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const div = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    div.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const divWrapper = document.createElement('div');\r\n  divWrapper.classList.add(\"restaurant-element\");\r\n\r\n  const div = document.createElement('a')\r\n  divWrapper.append(div);\r\n\r\n  const picture = document.createElement('picture');\r\n  \r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  // const pathPrefix = DBHelper.imageUrlForRestaurant(restaurant);\r\n  // image.src = require(`${pathPrefix}-large.jpg`);\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant, \"large\");\r\n  \r\n  // const smSrc = document.createElement('source');\r\n  // smSrc.media = '(max-width: 450px)';\r\n  // // smSrc.srcset = require(`${pathPrefix}-320x240.jpg`);\r\n  // smSrc.srcset = DBHelper.imageUrlForRestaurant(restaurant, \"320x240\");\r\n  \r\n  \r\n  // const lgSrc = document.createElement('source');\r\n  // lgSrc.media = '(min-width: 751px)';\r\n  // // lgSrc.srcset = require(`${pathPrefix}-large.jpg, ${pathPrefix}-1600_large_2x.jpg 2x`);\r\n  // lgSrc.srcset = DBHelper.imageUrlForRestaurant(restaurant, \"1600_large_2x.jpg 2x\");\r\n  // // console.log({image: image.src, smSrc: smSrc.srcset, lgSrc: lgSrc.srcset});\r\n  \r\n  image.alt = restaurant.name;\r\n  // picture.appendChild(smSrc);\r\n  // picture.appendChild(lgSrc);\r\n  picture.appendChild(image);\r\n  div.append(picture);\r\n\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  div.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  div.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  div.append(address);\r\n\r\n  // const more = document.createElement('a');\r\n  // more.innerHTML = 'View Details';\r\n  div.href = DBHelper.urlForRestaurant(restaurant);\r\n  // div.append(more)\r\n\r\n  return divWrapper;\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\r\n\r\nconst main = {\r\n  initMap,\r\n  fetchNeighborhoods,\r\n  fetchCuisines\r\n};\r\n\r\nexport default main;","let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\n// document.addEventListener('DOMContentLoaded', (event) => {  \n//   initMap();\n// });\n\n/**\n * Initialize leaflet map\n */\nconst initRestaurantMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1IjoidGlmZmFueWgxMDEiLCJhIjoiY2ppcTltYWdjMDB4dTNsbzF2MTBrd3U5NyJ9.p99H31XzJEgUSu1jJYRZDg',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n   \n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  pathPrefix = DBHelper.imageUrlForRestaurant(restaurant);\n  image.src = `${pathPrefix}-large.jpg`;\n  \n  const smSrc = document.createElement('source');\n  smSrc.media = '(max-width: 450px)';\n  smSrc.srcset = `${pathPrefix}-320x240.jpg`;\n  \n  \n  const lgSrc = document.createElement('source');\n  lgSrc.media = '(min-width: 750px)';\n  lgSrc.srcset = `${pathPrefix}-large.jpg, ${pathPrefix}-1600_large_2x.jpg 2x`;\n  \n  image.alt = smSrc.alt = lgSrc.alt = restaurant.name;\n  picture.appendChild(smSrc);\n  picture.appendChild(lgSrc);\n  picture.appendChild(image);\n  // name.appendChild(picture);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst illRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nexport default {\n  initRestaurantMap\n};","import main from './js/main';\nimport { initRestaurantMap } from './js/restaurant_info';\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    main.initMap(); // added \n    main.fetchNeighborhoods();\n    main.fetchCuisines();\n  });"]}
{"version":3,"sources":["node_modules/idb/lib/idb.js","js/idb/index.js","js/dbhelper.js","js/main.js","js/restaurant_info.js","index.js"],"names":["dbPromise","idb","open","upgradeDb","oldVersion","createObjectStore","createIndex","restaurantIdb","key","then","transaction","objectStore","get","val","tx","db","put","complete","delete","clear","keys","store","iterateKeyCursor","iterateCursor","call","cursor","push","continue","DBHelper","callback","xhr","XMLHttpRequest","DATABASE_URL","onload","status","restaurants","JSON","parse","responseText","error","send","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","size","newMap","marker","L","latlng","lat","lng","title","name","urlForRestaurant","addTo","port","main","markers","fetchNeighborhoods","log","fillNeighborhoodsHTML","self","select","document","getElementById","setAttribute","forEach","option","createElement","innerHTML","value","append","fetchCuisines","fillCuisinesHTML","initMap","tileLayer","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","fillRestaurantsHTML","resetRestaurants","remove","div","createRestaurantHTML","addMarkersToMap","divWrapper","classList","add","picture","image","className","src","imageUrlForRestaurant","alt","appendChild","address","href","mapMarkerForRestaurant","on","onClick","location","options","url","initRestaurantMap","fillBreadcrumb","fetchRestaurantFromURL","getParameterByName","fetchRestaurantById","fillRestaurantHTML","pathPrefix","smSrc","media","srcset","lgSrc","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","illRestaurantHoursHTML","operatingHours","hours","row","day","time","reviews","container","noReviews","ul","createReviewHTML","review","li","date","rating","comments","breadcrumb","window","replace","regex","RegExp","exec","decodeURIComponent","addEventListener","event"],"mappings":"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","file":"mws-restaurant-stage-1.0c6850d1.map","sourceRoot":"..","sourcesContent":["'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\n\n// set up db store\nconst dbPromise = idb.open('db', 1, (upgradeDb) => {\n    switch(upgradeDb.oldVersion) {\n        case 1:\n            const restaurantStore = upgradeDb.createObjectStore('restaurant');\n            restaurantStore.createIndex('name', 'cuisine', 'neighborhood');\n\n    }\n});\n\nconst restaurantIdb = {\n    get(key) {\n        return dbPromise.then(db => {\n            db.transaction('restaurant')\n                .objectStore('restaurant').get(key)\n        });\n    },\n    set(key, val) {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant', 'readwrite');\n            tx.objectStore('restaurant').put(val, key);\n            return tx.complete;\n        });\n    },\n    delete(key) {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant', 'readwrite');\n            tx.objectStore('restaurant').delete(key);\n            return tx.complete;\n        });\n    },\n    clear() {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant', 'readwrite');\n            tx.objectStore('restaurant').clear();\n            return tx.complete;\n        });\n    },\n    keys() {\n        return dbPromise.then(db => {\n            const tx = db.transaction('restaurant');\n            const keys = [];\n            const store = tx.objectStore('restaurant');\n\n            (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n                if (!cursor) return;\n                keys.push(cursor.key);\n                cursor.continue();\n            });\n            return tx.complete.then(() => keys);\n        })\n    }\n};\n\n\n// get a value\n// dbPromise.then((db) => {\n//     const tx = db.transaction('restaurant');\n//     const restaurantStore = tx.objectStore('restaurant');\n//     return restaurantStore.get('rest');\n// }).then((val) => {\n//     console.log('The value of \"rest\" is\", val');\n// });\n\n// set a value\n// dbPromise.then((db) => {\n//     const tx = db.transaction('restaurant', 'readwrite');\n//     const restaurantStore = tx.objectStore('restaurant');\n//     restaurantStore.put('restaurant_id', 'restaurant_obj');\n//     return tx.complete;\n// }).then((val) => {\n//     console.log('Added restaurant_obj to restaurant_id');\n// });\n\n// return all\n// dbPromise.then((db) => {\n//     const tx = db.transaaction('restaurant');\n//     const restStore = tx.objectStore('restaurant');\n//     const neighborhoodIdx = restStore.index('neighborhood');\n//     return neighborhoodIdx.getAll();\n// }).then((restaurants) => {\n//     console.log('indexed by neighborhood', restaurants);\n// });\n\n\n// // iterate through list\n// dbPromise.then((db) => {\n//     const tx = db.transaaction('restaurant');\n//     const restStore = tx.objectStore('restaurant');\n//     const neighborhoodIdx = restStore.index('neighborhood');\n//     return neighborhoodIdx.openCursor();\n// }).then(function logRestaurant(cursor) {\n//     if (!cursor) return;\n//     console.log('cursored at:', cursor.value.name);\n\n//     // update: cursor.update\n//     // delete: cursor.delete\n//     // skip: cursor.advance(numtoAdvance)\n//     return cursor.continue().then(logRestaurant);\n// }).then(() => {\n//     console.log('done cursoring');\n// });\n\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, size) {\r\n    return `../assets/images/${restaurant.id}-${size}.jpg`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, newMap) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\nexport default DBHelper;","import dbPromise from './idb';\r\nimport DBHelper from './dbhelper.js';\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar newMap\r\nvar markers = []\r\n\r\n// /**\r\n//  * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n//  */\r\n// document.addEventListener('DOMContentLoaded', (event) => {\r\n//   initMap(); // added \r\n//   fetchNeighborhoods();\r\n//   fetchCuisines();\r\n// });\r\n\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  console.log('DBHELP', DBHelper);\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  select.setAttribute('aria-label', \"neighborhood select\");\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n  select.setAttribute('aria-label', \"cuisines select\");\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoidGlmZmFueWgxMDEiLCJhIjoiY2ppcTltYWdjMDB4dTNsbzF2MTBrd3U5NyJ9.p99H31XzJEgUSu1jJYRZDg',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const div = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    div.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const divWrapper = document.createElement('div');\r\n  divWrapper.classList.add(\"restaurant-element\");\r\n\r\n  const div = document.createElement('a')\r\n  divWrapper.append(div);\r\n\r\n  const picture = document.createElement('picture');\r\n  \r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  // const pathPrefix = DBHelper.imageUrlForRestaurant(restaurant);\r\n  // image.src = require(`${pathPrefix}-large.jpg`);\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant, \"large\");\r\n  \r\n  // const smSrc = document.createElement('source');\r\n  // smSrc.media = '(max-width: 450px)';\r\n  // // smSrc.srcset = require(`${pathPrefix}-320x240.jpg`);\r\n  // smSrc.srcset = DBHelper.imageUrlForRestaurant(restaurant, \"320x240\");\r\n  \r\n  \r\n  // const lgSrc = document.createElement('source');\r\n  // lgSrc.media = '(min-width: 751px)';\r\n  // // lgSrc.srcset = require(`${pathPrefix}-large.jpg, ${pathPrefix}-1600_large_2x.jpg 2x`);\r\n  // lgSrc.srcset = DBHelper.imageUrlForRestaurant(restaurant, \"1600_large_2x.jpg 2x\");\r\n  // // console.log({image: image.src, smSrc: smSrc.srcset, lgSrc: lgSrc.srcset});\r\n  \r\n  image.alt = restaurant.name;\r\n  // picture.appendChild(smSrc);\r\n  // picture.appendChild(lgSrc);\r\n  picture.appendChild(image);\r\n  div.append(picture);\r\n\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  div.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  div.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  div.append(address);\r\n\r\n  // const more = document.createElement('a');\r\n  // more.innerHTML = 'View Details';\r\n  div.href = DBHelper.urlForRestaurant(restaurant);\r\n  // div.append(more)\r\n\r\n  return divWrapper;\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\r\n\r\nconst main = {\r\n  initMap,\r\n  fetchNeighborhoods,\r\n  fetchCuisines\r\n};\r\n\r\nexport default main;","let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\n// document.addEventListener('DOMContentLoaded', (event) => {  \n//   initMap();\n// });\n\n/**\n * Initialize leaflet map\n */\nconst initRestaurantMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1IjoidGlmZmFueWgxMDEiLCJhIjoiY2ppcTltYWdjMDB4dTNsbzF2MTBrd3U5NyJ9.p99H31XzJEgUSu1jJYRZDg',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n   \n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  pathPrefix = DBHelper.imageUrlForRestaurant(restaurant);\n  image.src = `${pathPrefix}-large.jpg`;\n  \n  const smSrc = document.createElement('source');\n  smSrc.media = '(max-width: 450px)';\n  smSrc.srcset = `${pathPrefix}-320x240.jpg`;\n  \n  \n  const lgSrc = document.createElement('source');\n  lgSrc.media = '(min-width: 750px)';\n  lgSrc.srcset = `${pathPrefix}-large.jpg, ${pathPrefix}-1600_large_2x.jpg 2x`;\n  \n  image.alt = smSrc.alt = lgSrc.alt = restaurant.name;\n  picture.appendChild(smSrc);\n  picture.appendChild(lgSrc);\n  picture.appendChild(image);\n  // name.appendChild(picture);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst illRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nexport default {\n  initRestaurantMap\n};","import main from './js/main';\nimport { initRestaurantMap } from './js/restaurant_info';\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    main.initMap(); // added \n    main.fetchNeighborhoods();\n    main.fetchCuisines();\n  });"]}
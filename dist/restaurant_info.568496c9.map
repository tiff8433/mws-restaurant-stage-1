{"version":3,"sources":["js/restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","getElementById","innerHTML","address","picture","image","createElement","className","pathPrefix","imageUrlForRestaurant","src","smSrc","media","srcset","lgSrc","alt","appendChild","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.568496c9.map","sourceRoot":"..","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1IjoidGlmZmFueWgxMDEiLCJhIjoiY2ppcTltYWdjMDB4dTNsbzF2MTBrd3U5NyJ9.p99H31XzJEgUSu1jJYRZDg',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n   \n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  pathPrefix = DBHelper.imageUrlForRestaurant(restaurant);\n  image.src = `${pathPrefix}-large.jpg`;\n  \n  const smSrc = document.createElement('source');\n  smSrc.media = '(max-width: 450px)';\n  smSrc.srcset = `${pathPrefix}-320x240.jpg`;\n  \n  \n  const lgSrc = document.createElement('source');\n  lgSrc.media = '(min-width: 750px)';\n  lgSrc.srcset = `${pathPrefix}-large.jpg, ${pathPrefix}-1600_large_2x.jpg 2x`;\n  \n  image.alt = smSrc.alt = lgSrc.alt = restaurant.name;\n  picture.appendChild(smSrc);\n  picture.appendChild(lgSrc);\n  picture.appendChild(image);\n  // name.appendChild(picture);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}